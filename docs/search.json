[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistics",
    "section": "",
    "text": "Preface\nI read Mike X Cohen’s excellent book “Modern Statistics”, and now it’s time to practice.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "data/height.html",
    "href": "data/height.html",
    "title": "1  height data",
    "section": "",
    "text": "I found growth curves for girls and boys in Israel:\n\nurl girls, pdf girls\nurl boys, pdf boys\nurl both, png boys, png girls.\n\nFor example, see this:\n\nI used the great online resource Web Plot Digitizer v4 to extract the data from the images files. I captured all the growth curves as best as I could. The first step now is to get interpolated versions of the digitized data. For instance, see below the 50th percentile for boys:\n\n\nimport libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"ticks\", font_scale=1.5)\nfrom scipy.optimize import curve_fit\nfrom scipy.special import erf\nfrom scipy.interpolate import UnivariateSpline\nimport matplotlib.animation as animation\nfrom scipy.stats import norm\nimport plotly.graph_objects as go\nimport plotly.io as pio\npio.renderers.default = 'notebook'\n# %matplotlib widget\n\n\n\n\ndefine useful arrays\nage_list = np.round(np.arange(2.0, 20.1, 0.1), 1)\nheight_list = np.round(np.arange(70, 220, 0.1), 1)\n\n\n\n\nimport sample data, boys 50th percentile\ndf_temp_boys_50th = pd.read_csv('../archive/data/height/boys-p50.csv', names=['age','height'])\nspline = UnivariateSpline(df_temp_boys_50th['age'], df_temp_boys_50th['height'], s=0.5)\ninterpolated = spline(age_list)\n\n\n\n\nplot\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(df_temp_boys_50th['age'], df_temp_boys_50th['height'], label='digitized data',\n        marker='o', markerfacecolor='None', markeredgecolor=\"black\", markersize=6, linestyle='None')\nax.plot(age_list, interpolated, label='interpolated', color=\"black\", linewidth=2)\nax.set(xlabel='age (years)',\n       ylabel='height (cm)',\n       xticks=np.arange(2, 21, 2),\n       title=\"boys, 50th percentile\"\n       )\nax.legend(frameon=False);\n\n\n\n\n\n\n\n\n\nLet’s do the same for all the other curves, and then save them to a file.\n\n\ninterpolate all growth curves\ncol_names = ['p05', 'p10', 'p25', 'p50', 'p75', 'p90', 'p95']\nfile_names_boys = ['boys-p05.csv', 'boys-p10.csv', 'boys-p25.csv', 'boys-p50.csv',\n                   'boys-p75.csv', 'boys-p90.csv', 'boys-p95.csv',]\nfile_names_girls = ['girls-p05.csv', 'girls-p10.csv', 'girls-p25.csv', 'girls-p50.csv',\n                   'girls-p75.csv', 'girls-p90.csv', 'girls-p95.csv',]\n\n# create dataframe with age column\ndf_boys = pd.DataFrame({'age': age_list})\ndf_girls = pd.DataFrame({'age': age_list})\n# loop over file names and read in data\nfor i, file_name in enumerate(file_names_boys):\n    # read in data\n    df_temp = pd.read_csv('../archive/data/height/' + file_name, names=['age','height'])\n    spline = UnivariateSpline(df_temp['age'], df_temp['height'], s=0.5)\n    df_boys[col_names[i]] = spline(age_list)\nfor i, file_name in enumerate(file_names_girls):\n    # read in data\n    df_temp = pd.read_csv('../archive/data/height/' + file_name, names=['age','height'])\n    spline = UnivariateSpline(df_temp['age'], df_temp['height'], s=0.5)\n    df_girls[col_names[i]] = spline(age_list)\n\n# make age index\ndf_boys.set_index('age', inplace=True)\ndf_boys.index = df_boys.index.round(1)\ndf_boys.to_csv('../archive/data/height/boys_height_vs_age_combined.csv', index=True)\ndf_girls.set_index('age', inplace=True)\ndf_girls.index = df_girls.index.round(1)\ndf_girls.to_csv('../archive/data/height/girls_height_vs_age_combined.csv', index=True)\n\n\nLet’s take a look at what we just did.\n\ndf_girls\n\n\n\n\n\n\n\n\np05\np10\np25\np50\np75\np90\np95\n\n\nage\n\n\n\n\n\n\n\n\n\n\n\n2.0\n79.269087\n80.794167\n83.049251\n85.155597\n87.475854\n89.779822\n90.882059\n\n\n2.1\n80.202106\n81.772053\n84.052858\n86.207778\n88.713405\n90.883740\n92.409913\n\n\n2.2\n81.130687\n82.706754\n85.011591\n87.211543\n89.856186\n91.940642\n93.416959\n\n\n2.3\n82.048325\n83.601023\n85.928399\n88.170313\n90.914093\n92.953965\n94.270653\n\n\n2.4\n82.948516\n84.457612\n86.806234\n89.087509\n91.897022\n93.927147\n95.226089\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n19.6\n152.520938\n154.812286\n158.775277\n163.337149\n167.699533\n171.531349\n173.969235\n\n\n19.7\n152.534223\n154.814440\n158.791925\n163.310864\n167.704618\n171.519600\n173.980150\n\n\n19.8\n152.548001\n154.827666\n158.815071\n163.275852\n167.708562\n171.504730\n173.990964\n\n\n19.9\n152.562338\n154.853760\n158.845506\n163.231563\n167.711342\n171.486629\n174.001704\n\n\n20.0\n152.577300\n154.894521\n158.884019\n163.177444\n167.712936\n171.465189\n174.012396\n\n\n\n\n181 rows × 7 columns\n\n\n\n\n\nshow all interpolated curves for girls\nfig, ax = plt.subplots(figsize=(8, 6))\n# loop over col_names and plot each column\ncolors = sns.color_palette(\"Oranges\", len(col_names))\nfor col, color in zip(col_names, colors):\n    ax.plot(df_girls.index, df_girls[col], label=col, color=color)\nax.set(xlabel='age (years)',\n       ylabel='height (cm)',\n       xticks=np.arange(2, 21, 2),\n       title=\"growth curves for girls\\npercentile curves: 5, 10, 25, 50, 75, 90, 95\",\n       );\n\n\n\n\n\n\n\n\n\nLet’s now see the percentiles for girls age 20.\n\n\nplot cdf for girls, age 20\nfig, ax = plt.subplots(figsize=(8, 6))\npercentile_list = np.array([5, 10, 25, 50, 75, 90, 95])\ndata = df_girls.loc[20.0]\nax.plot(data, percentile_list, ls='', marker='o', markersize=6, color=\"black\")\nax.set(xlabel='height (cm)',\n         ylabel='percentile',\n         yticks=percentile_list,\n         title=\"cdf for girls, age 20\"\n         );\n\n\n\n\n\n\n\n\n\nI suspect that the heights in the population are normally distributed. Let’s check that. I’ll fit the data to the integral of a gaussian, because the percentiles correspond to a cdf. If a pdf is a gaussian, its cumulative is given by\n\n\\Phi(x) = \\frac{1}{2} \\left( 1 + \\text{erf}\\left(\\frac{x - \\mu}{\\sigma \\sqrt{2}}\\right) \\right)\n\nwhere \\mu is the mean and \\sigma is the standard deviation of the distribution. The error function \\text{erf} is a sigmoid function, which is a good approximation for the cdf of the normal distribution.\n\n\ndefine functions\ndef erf_model(x, mu, sigma):\n    return 50 * (1 + erf((x - mu) / (sigma * np.sqrt(2))) )\n# initial guess for parameters: [mu, sigma]\np0 = [150, 6]\n# Calculate R-squared\ndef calculate_r2(y_true, y_pred):\n    ss_res = np.sum((y_true - y_pred) ** 2)\n    ss_tot = np.sum((y_true - np.mean(y_true)) ** 2)\n    return 1 - (ss_res / ss_tot)\n\n\n\n\nfit model to data\ndata = df_girls.loc[20.0]\nparams, _ = curve_fit(erf_model, data, percentile_list, p0=p0,\n                        bounds=([100, 3],   # lower bounds for mu and sigma\n                                [200, 10])  # upper bounds for mu and sigma\n                        )\n# store the parameters in the dataframe\npercentile_predicted = erf_model(data, *params)\n# R-squared value\nr2 = calculate_r2(percentile_list, percentile_predicted)\n\n\n\n\nshow results\nfig, ax = plt.subplots(figsize=(8, 6))\npercentile_list = np.array([5, 10, 25, 50, 75, 90, 95])\ndata = df_girls.loc[20.0]\nax.plot(data, percentile_list, ls='', marker='o', markersize=6, color=\"black\", label='data')\nfit = erf_model(height_list, *params)\nax.plot(height_list, fit, label='fit', color=\"red\", linewidth=2)\nax.text(150, 75, f'$\\mu$ = {params[0]:.1f} cm\\n$\\sigma$ = {params[1]:.1f} cm\\nR$^2$ = {r2:.6f}',\n        fontsize=14, bbox=dict(facecolor='white', alpha=0.5))\nax.legend(frameon=False)\nax.set(xlabel='height (cm)',\n       xlim=(140, 190),\n         ylabel='percentile',\n         yticks=percentile_list,\n         title=\"the data is very well fitted by a normal distribution\"\n         );\n\n\n\n\n\n\n\n\n\nAnother way of making sure that the model fits the data is to make a QQ plot. In this plot, the quantiles of the data are plotted against the quantiles of the normal distribution. If the data is normally distributed, the points should fall on a straight line.\n\n\nshow QQ plot\nfitted_quantiles = norm.cdf(data, loc=params[0], scale=params[1])\nexperimental_quantiles = percentile_list / 100\nfig, ax = plt.subplots(figsize=(8, 6))\nax.set_aspect('equal', adjustable='box')\nax.plot(experimental_quantiles, fitted_quantiles,\n        ls='', marker='o', markersize=6, color=\"black\",\n        label='qq points')\nax.plot([0, 1], [0, 1], color='red', linewidth=2, label=\"1:1 line\")\nax.set(xlabel='empirical quantiles',\n       ylabel='fitted quantiles',\n       xlim=(0, 1),\n       ylim=(0, 1),\n       title=\"QQ plot\")\nax.legend(frameon=False)\n\n\n\n\n\n\n\n\n\nGreat, now we just need to do exactly the same for both sexes, and all the ages. I chose to divide age from 2 to 20 into 0.1 intervals.\n\n\ncreate dataframes to store the parameters mu, sigma, r2\ndf_stats_boys = pd.DataFrame(index=age_list, columns=['mu', 'sigma', 'r2'])\ndf_stats_boys['mu'] = 0.0\ndf_stats_boys['sigma'] = 0.0\ndf_stats_boys['r2'] = 0.0\ndf_stats_girls = pd.DataFrame(index=age_list, columns=['mu', 'sigma', 'r2'])\ndf_stats_girls['mu'] = 0.0\ndf_stats_girls['sigma'] = 0.0\ndf_stats_girls['r2'] = 0.0\n\n\n\n\nfit model to all the data\np0 = [80, 3]\n# loop over ages in the index, calculate mu and sigma\nfor i in df_boys.index:\n    # fit the model to the data\n    data = df_boys.loc[i]\n    params, _ = curve_fit(erf_model, data, percentile_list, p0=p0,\n                          bounds=([70, 2],   # lower bounds for mu and sigma\n                                  [200, 10])  # upper bounds for mu and sigma\n                         )\n    # store the parameters in the dataframe\n    df_stats_boys.at[i, 'mu'] = params[0]\n    df_stats_boys.at[i, 'sigma'] = params[1]\n    percentile_predicted = erf_model(data, *params)\n    # R-squared value\n    r2 = calculate_r2(percentile_list, percentile_predicted)\n    df_stats_boys.at[i, 'r2'] = r2\n    p0 = params\n# same for girls\np0 = [80, 3]\nfor i in df_girls.index:\n    # fit the model to the data\n    data = df_girls.loc[i]\n    params, _ = curve_fit(erf_model, data, percentile_list, p0=p0,\n                          bounds=([70, 3],   # lower bounds for mu and sigma\n                                  [200, 10])  # upper bounds for mu and sigma\n                         )\n    # store the parameters in the dataframe\n    df_stats_girls.at[i, 'mu'] = params[0]\n    df_stats_girls.at[i, 'sigma'] = params[1]\n    percentile_predicted = erf_model(data, *params)\n    # R-squared value\n    r2 = calculate_r2(percentile_list, percentile_predicted)\n    df_stats_girls.at[i, 'r2'] = r2\n    p0 = params\n\n# save the dataframes to csv files\ndf_stats_boys.to_csv('../archive/data/height/boys_height_stats.csv', index=True)\ndf_stats_girls.to_csv('../archive/data/height/girls_height_stats.csv', index=True)\n\n\nLet’s see what we got. The top panel in the graph shows the average height for boys and girls, the middle panel shows the coefficient of variation (\\sigma/\\mu), and the bottom panel shows the R2 of the fit (note that the range is very close to 1).\n\ndf_stats_boys\n\n\n\n\n\n\n\n\nmu\nsigma\nr2\n\n\n\n\n2.0\n86.463069\n3.563785\n0.999511\n\n\n2.1\n87.374895\n3.596583\n0.999676\n\n\n2.2\n88.269676\n3.627433\n0.999742\n\n\n2.3\n89.148086\n3.657263\n0.999752\n\n\n2.4\n90.010783\n3.686764\n0.999733\n\n\n...\n...\n...\n...\n\n\n19.6\n176.802810\n7.134561\n0.999991\n\n\n19.7\n176.845789\n7.135786\n0.999994\n\n\n19.8\n176.892196\n7.137430\n0.999995\n\n\n19.9\n176.942521\n7.139466\n0.999990\n\n\n20.0\n176.997255\n7.141858\n0.999976\n\n\n\n\n181 rows × 3 columns\n\n\n\n\n\nplot results\nfig, ax = plt.subplots(3,1, figsize=(8, 10), sharex=True)\nfig.subplots_adjust(left=0.15)\nax[0].plot(df_stats_boys['mu'], label='boys', lw=2)\nax[0].plot(df_stats_girls['mu'], label='girls', lw=2)\nax[0].legend(frameon=False)\n\nax[1].plot(df_stats_boys['sigma'] / df_stats_boys['mu'], lw=2)\nax[1].plot(df_stats_girls['sigma'] / df_stats_girls['mu'], lw=2)\n\nax[2].plot(df_stats_boys.index, df_stats_boys['r2'], label=r'$r2$ boys', lw=2)\nax[2].plot(df_stats_girls.index, df_stats_girls['r2'], label=r'$r2$ girls', lw=2)\n\nax[0].set(ylabel='average height (cm)',)\nax[1].set(ylabel='CV',\n          ylim=[0,0.055])\nax[2].set(xlabel='age (years)',\n            ylabel=r'$R^2$',\n            xticks=np.arange(2, 21, 2),\n          );\n\n\n\n\n\n\n\n\n\nLet’s see how the pdfs for boys and girls move and morph as age increases.\n\n\nproduce dataframes for pre-calculated pdfs\nage_list_string = age_list.astype(str).tolist()\ndf_pdf_boys = pd.DataFrame(index=height_list, columns=age_list_string)\ndf_pdf_girls = pd.DataFrame(index=height_list, columns=age_list_string)\n\nfor age in df_pdf_boys.columns:\n    age_float = round(float(age), 1)\n    df_pdf_boys[age] = norm.pdf(height_list,\n                                loc=df_stats_boys.loc[age_float]['mu'],\n                                scale=df_stats_boys.loc[age_float]['sigma'])\nfor age in df_pdf_girls.columns:\n    age_float = round(float(age), 1)\n    df_pdf_girls[age] = norm.pdf(height_list,\n                                loc=df_stats_girls.loc[age_float]['mu'],\n                                scale=df_stats_girls.loc[age_float]['sigma'])\n\n\n\ndf_pdf_girls\n\n\n\n\n\n\n\n\n2.0\n2.1\n2.2\n2.3\n2.4\n2.5\n2.6\n2.7\n2.8\n2.9\n...\n19.1\n19.2\n19.3\n19.4\n19.5\n19.6\n19.7\n19.8\n19.9\n20.0\n\n\n\n\n70.0\n0.000006\n2.962419e-06\n1.229580e-06\n4.740717e-07\n1.893495e-07\n7.928033e-08\n3.395629e-08\n1.454961e-08\n6.214658e-09\n2.698367e-09\n...\n3.876760e-46\n4.998212e-46\n6.108274e-46\n6.965756e-46\n7.300518e-46\n6.928073e-46\n5.866310e-46\n4.367574e-46\n2.817087e-46\n1.550490e-46\n\n\n70.1\n0.000007\n3.369929e-06\n1.401926e-06\n5.423176e-07\n2.172465e-07\n9.118694e-08\n3.914667e-08\n1.681357e-08\n7.199311e-09\n3.133161e-09\n...\n4.821662e-46\n6.212999e-46\n7.589544e-46\n8.652519e-46\n9.067461e-46\n8.605908e-46\n7.289698e-46\n5.430839e-46\n3.506265e-46\n1.932327e-46\n\n\n70.2\n0.000008\n3.830459e-06\n1.597215e-06\n6.199308e-07\n2.490751e-07\n1.048086e-07\n4.509972e-08\n1.941687e-08\n8.334521e-09\n3.635676e-09\n...\n5.995467e-46\n7.721230e-46\n9.427830e-46\n1.074523e-45\n1.125944e-45\n1.068759e-45\n9.056344e-46\n6.751373e-46\n4.363019e-46\n2.407630e-46\n\n\n70.3\n0.000009\n4.350475e-06\n1.818328e-06\n7.081296e-07\n2.853621e-07\n1.203810e-07\n5.192270e-08\n2.240831e-08\n9.642428e-09\n4.216078e-09\n...\n7.453283e-46\n9.593350e-46\n1.170864e-45\n1.334099e-45\n1.397806e-45\n1.326973e-45\n1.124851e-45\n8.391039e-46\n5.427845e-46\n2.999137e-46\n\n\n70.4\n0.000010\n4.937172e-06\n2.068480e-06\n8.082806e-07\n3.267014e-07\n1.381707e-07\n5.973725e-08\n2.584341e-08\n1.114829e-08\n4.885994e-09\n...\n9.263403e-46\n1.191661e-45\n1.453785e-45\n1.655996e-45\n1.734906e-45\n1.647188e-45\n1.396806e-45\n1.042648e-45\n6.750965e-46\n3.735083e-46\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n219.5\n0.000000\n5.214425e-307\n1.377605e-289\n3.568527e-277\n6.457994e-266\n2.232144e-255\n6.340272e-246\n9.969867e-238\n1.389324e-230\n5.441854e-224\n...\n5.200570e-18\n5.741874e-18\n6.194642e-18\n6.495054e-18\n6.583545e-18\n6.417949e-18\n5.986319e-18\n5.315101e-18\n4.468701e-18\n3.538724e-18\n\n\n219.6\n0.000000\n1.813597e-307\n5.050074e-290\n1.356408e-277\n2.537010e-266\n9.046507e-256\n2.642444e-246\n4.256155e-238\n6.055129e-231\n2.417510e-224\n...\n4.558798e-18\n5.035058e-18\n5.433557e-18\n5.698034e-18\n5.775970e-18\n5.630212e-18\n5.250299e-18\n4.659675e-18\n3.915265e-18\n3.097919e-18\n\n\n219.7\n0.000000\n6.302763e-308\n1.849870e-290\n5.151948e-278\n9.959447e-267\n3.663840e-256\n1.100546e-246\n1.815751e-238\n2.637298e-231\n1.073274e-224\n...\n3.995288e-18\n4.414220e-18\n4.764871e-18\n4.997654e-18\n5.066279e-18\n4.938013e-18\n4.603699e-18\n4.084117e-18\n3.429566e-18\n2.711382e-18\n\n\n219.8\n0.000000\n2.188653e-308\n6.771033e-291\n1.955386e-278\n3.906942e-267\n1.482823e-256\n4.580523e-247\n7.741154e-239\n1.147918e-231\n4.761829e-225\n...\n3.500614e-18\n3.869030e-18\n4.177503e-18\n4.382343e-18\n4.442754e-18\n4.329907e-18\n4.035791e-18\n3.578814e-18\n3.003413e-18\n2.372514e-18\n\n\n219.9\n0.000000\n7.594139e-309\n2.476504e-291\n7.416066e-279\n1.531537e-267\n5.997065e-257\n1.905138e-247\n3.298116e-239\n4.993198e-232\n2.111339e-225\n...\n3.066470e-18\n3.390384e-18\n3.661688e-18\n3.841895e-18\n3.895062e-18\n3.795805e-18\n3.537115e-18\n3.135297e-18\n2.629596e-18\n2.075507e-18\n\n\n\n\n1500 rows × 181 columns\n\n\n\n\n\nplotly widget\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\npio.renderers.default = 'notebook'\n\n# create figure\nfig = go.Figure()\n\n# assume both dataframes have the same columns (ages) and index (height)\nages = df_pdf_boys.columns\nx_vals = df_pdf_boys.index\n\n# add traces: 2 per age (boys and girls), all hidden except the first pair\nfor i, age in enumerate(ages):\n    fig.add_trace(go.Scatter(x=x_vals, y=df_pdf_boys[age], name=f'Boys {age}', \n                             line=dict(color='#1f77b4'), visible=(i == 0)))\n    fig.add_trace(go.Scatter(x=x_vals, y=df_pdf_girls[age], name=f'Girls {age}', \n                             line=dict(color='#ff7f0e'), visible=(i == 0)))\n\n# create slider steps\nsteps = []\nfor i, age in enumerate(ages):\n    vis = [False] * (2 * len(ages))\n    vis[2*i] = True      # boys trace\n    vis[2*i + 1] = True  # girls trace\n\n    steps.append(dict(\n        method='update',\n        args=[{'visible': vis},\n              {'title': f'Height Distribution - Age: {age}'}],\n        label=str(age)\n    ))\n\n# define slider\nsliders = [dict(\n    active=0,\n    currentvalue={\"prefix\": \"Age: \"},\n    pad={\"t\": 50},\n    steps=steps\n)]\n\n# update layout\nfig.update_layout(\n    sliders=sliders,\n    title='Height Distribution by Age',\n    xaxis_title='Height (cm)',\n    yaxis_title='Density',\n    yaxis=dict(range=[0, 0.12]),\n    showlegend=True,\n    height=600,\n    width=800\n)\n\nfig.show()\n\n\n                                                \n\n\nA few notes about what we can learn from the analysis above.\n\nMy impression that 12-year-old girls are taller than boys is indeed true.\nBoys and girls have very similar distributions up to age 11.\nFrom age 11 to 13 girls are on average taller than boys.\nFrom age 13 boys become taller than girls, on average.\nThe graph showing the coefficient of variation is interesting. CV for girls peaks roughtly at age 12, and for boys it peaks around age 14. These local maxima may be explained by the wide variability in the age ofpuberty onset.\nThe height distribution for each sex, across all ages, is indeed extremely well described by the normal distribution. What biological factors may account for such a fact?\n\nI’ll plot one last graph from now, let’s see what we can learn from it. Let’s see the pdf for boys and girls across three age groups: 8, 12, and 15 year olds.\n\n\ncomparison across three ages\nfig, ax = plt.subplots(3, 1, figsize=(8, 12), sharex=True)\nfig.subplots_adjust(hspace=0.1)\nages_to_plot = [8.0, 12.0, 15.0]\n\nfor i, age in enumerate(ages_to_plot):\n    pdf_boys = norm.pdf(height_list, loc=df_stats_boys.loc[age]['mu'], scale=df_stats_boys.loc[age]['sigma'])\n    pdf_girls = norm.pdf(height_list, loc=df_stats_girls.loc[age]['mu'], scale=df_stats_girls.loc[age]['sigma'])\n    ax[i].plot(height_list, pdf_boys, label='boys', color='tab:blue')\n    ax[i].plot(height_list, pdf_girls, label='girls', color='tab:orange')\n    ax[i].text(0.98, 0.98, f'age: {age} years', transform=ax[i].transAxes, verticalalignment='top', horizontalalignment='right')\n    ax[i].set(ylabel='pdf',\n              ylim=(0, 0.07),\n            )\nax[2].legend(frameon=False)\nax[2].set(xlabel='height (cm)',\n          xlim=(100, 200),);\n\n\n\n\n\n\n\n\n\n\nIndeed, boys and girls age 8 have the exact same height distribution.\n12-year-old girls are indeed taller than boys, on average. This difference is relatiely small, though.\nBy age 15 boys have long surpassed girls in height, and the difference is quite large. Boys still have some growing to do, but girls are mostly done growing.",
    "crumbs": [
      "data",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>height data</span>"
    ]
  },
  {
    "objectID": "t_test/t_test_one_sample.html",
    "href": "t_test/t_test_one_sample.html",
    "title": "2  one-sample t-test",
    "section": "",
    "text": "2.1 Question\nI measured the height of 10 adult men. Were they sampled from the general population of men?",
    "crumbs": [
      "hypothesis testing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>one-sample t-test</span>"
    ]
  },
  {
    "objectID": "t_test/t_test_one_sample.html#hypotheses",
    "href": "t_test/t_test_one_sample.html#hypotheses",
    "title": "2  one-sample t-test",
    "section": "2.2 Hypotheses",
    "text": "2.2 Hypotheses\n\nNull hypothesis: The sample mean is equal to the population mean. In this case, the answer would be “yes”\nAlternative hypothesis: The sample mean is not equal to the population mean. Answer would be “no”.\nSignificance level: 0.05\n\n\n\nimport libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"ticks\", font_scale=1.5)\nfrom scipy.stats import norm, ttest_1samp, t\n%matplotlib widget\n\n\n\n\nload data\ndf_boys = pd.read_csv('../archive/data/height/boys_height_stats.csv', index_col=0)\nmu_boys = df_boys.loc[20.0, 'mu']\nsigma_boys = df_boys.loc[20.0, 'sigma']\n\n\nLet’s start with a sample of 10.\n\n\ngenerate data\nN = 10\n# set scipy seed for reproducibility\nnp.random.seed(314)\nsample10 = norm.rvs(size=N, loc=mu_boys+2, scale=sigma_boys)\n\n\n\n\nplot sample against population pdf\nheight_list = np.arange(140, 220, 0.1)\npdf_boys = norm.pdf(height_list, loc=mu_boys, scale=sigma_boys)\n\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(height_list, pdf_boys, lw=2, color='tab:blue', label='population')\n\nax.eventplot(sample10, orientation=\"horizontal\", lineoffsets=0.03,\n             linewidth=1, linelengths= 0.005,\n             colors='gray', label='sample')\n\nax.text(190, 0.04, \n       f\"sample mean: {sample10.mean():.2f} cm\\nsample std: {sample10.std(ddof=1):.2f} cm\", \n       ha='left', va='top', color='gray')\n\nax.text(190, 0.02, \n       f\"pop. mean: {mu_boys:.2f} cm\\npop. std: {sigma_boys:.2f} cm\", \n       ha='left', va='top', color='tab:blue')\n\nax.legend(frameon=False)\nax.set(xlabel='height (cm)',\n       ylabel='probability density',\n       title=\"men (age 20)\",\n       xlim=(140, 220),\n       );\n\n\n\n\n\nThe t value is calculated as follows: \nt = \\frac{\\bar{x} - \\mu}{s / \\sqrt{n}}\n\nwhere\n\n\\bar{x}: sample mean\n\\mu: population mean\ns: sample standard deviation\nn: sample size\n\nLet’s try the formula above and compare it with scipy’s ttest_1samp function.\n\n\ncalculate t-value\nt_value_formula = (sample10.mean() - mu_boys) / (sample10.std(ddof=1) / np.sqrt(N))\nt_value_scipy = ttest_1samp(sample10, popmean=mu_boys)\nprint(f\"t-value (formula): {t_value_formula:.3f}\")\nprint(f\"t-value (scipy): {t_value_scipy.statistic:.3f}\")\n\n\nt-value (formula): 1.759\nt-value (scipy): 1.759\n\n\nLet’s convert this t value to a p value. It is easy to visualize the p value by ploting the pdf for the t distribution. The p value is the area under the curve for t greater than the t value and smaller than the negative t value.\n\n\nvisualize t-distribution\n# degrees of freedom\ndof = N - 1\nfig, ax = plt.subplots(figsize=(10, 6))\n\nt_array_min = np.round(t.ppf(0.001, dof),3)\nt_array_max = np.round(t.ppf(0.999, dof),3)\nt_array = np.arange(t_array_min, t_array_max, 0.001)\n\n# annotate vertical array at t_value_scipy\nax.annotate(f\"t value = {t_value_scipy.statistic:.3f}\",\n                        xy=(t_value_scipy.statistic, 0.10),\n                        xytext=(t_value_scipy.statistic, 0.30),\n                        fontsize=14,\n                        arrowprops=dict(arrowstyle=\"-&gt;\", lw=2, color='black'),\n                        ha='center')\nax.annotate(f\"-t value = -{t_value_scipy.statistic:.3f}\",\n                        xy=(-t_value_scipy.statistic, 0.10),\n                        xytext=(-t_value_scipy.statistic, 0.30),\n                        fontsize=14,\n                        arrowprops=dict(arrowstyle=\"-&gt;\", lw=2, color='black'),\n                        ha='center')\n# fill between t-distribution and normal distribution\nax.fill_between(t_array, t.pdf(t_array, dof),\n                 where=(np.abs(t_array) &gt; t_value_scipy.statistic),\n                 color='tab:blue', alpha=0.5,\n                 label='rejection region')\n\n# write t_value_scipy.pvalue on the plot\nax.text(0, 0.05,\n        f\"p value = {t_value_scipy.pvalue:.3f}\", \n        ha='center', va='bottom',\n        bbox=dict(facecolor='tab:blue', alpha=0.5, boxstyle=\"round\"))\n\nax.plot(t_array, t.pdf(t_array, dof),\n       color='black', lw=2)\n\nax.set(xlabel='t',\n       ylabel='probability density',\n       title=\"t-distribution (N=10)\",\n       );\n\n\n\n\n\n\n\n\n\nThe p value is the fraction of the t distribution that is more extreme than the observed t value. If the p value is less than the significance level, we reject the null hypothesis. In this case, the p value is larger than the significance level, so we fail to reject the null hypothesis. This means that we do not have enough evidence to say that the sample mean is different from the population mean. In other words, we cannot conclude that the 10 men samples were drawn from a distribution different than the general population.",
    "crumbs": [
      "hypothesis testing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>one-sample t-test</span>"
    ]
  },
  {
    "objectID": "t_test/t_test_one_sample.html#increase-the-sample-size",
    "href": "t_test/t_test_one_sample.html#increase-the-sample-size",
    "title": "2  one-sample t-test",
    "section": "2.3 increase the sample size",
    "text": "2.3 increase the sample size\nLet’s see what happens when we increase the sample size to 100.\n\n\ngenerate data\nN = 100\n# set scipy seed for reproducibility\nnp.random.seed(628)\nsample100 = norm.rvs(size=N, loc=mu_boys+2, scale=sigma_boys)\n\n\n\n\nplot sample against population pdf\nheight_list = np.arange(140, 220, 0.1)\npdf_boys = norm.pdf(height_list, loc=mu_boys, scale=sigma_boys)\n\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(height_list, pdf_boys, lw=2, color='tab:blue', label='population')\n\nax.eventplot(sample100, orientation=\"horizontal\", lineoffsets=0.03,\n             linewidth=1, linelengths= 0.005,\n             colors='gray', label='sample')\n\nax.text(190, 0.04, \n       f\"sample mean: {sample100.mean():.2f} cm\\nsample std: {sample100.std(ddof=1):.2f} cm\", \n       ha='left', va='top', color='gray')\n\nax.text(190, 0.02, \n       f\"pop. mean: {mu_boys:.2f} cm\\npop. std: {sigma_boys:.2f} cm\", \n       ha='left', va='top', color='tab:blue')\n\nax.legend(frameon=False)\nax.set(xlabel='height (cm)',\n       ylabel='probability density',\n       title=\"men (age 20)\",\n       xlim=(140, 220),\n       );\n\n\n\n\n\n\n\n\n\n\n\ncalculate t-value\nt_value_scipy = ttest_1samp(sample100, popmean=mu_boys)\nprint(f\"t-value: {t_value_scipy.statistic:.3f}\")\nprint(f\"p-value: {t_value_scipy.pvalue:.3f}\")\n\n\nt-value: 2.675\np-value: 0.009\n\n\n\n\nvisualize t-distribution\n# degrees of freedom\ndof = N - 1\nfig, ax = plt.subplots(figsize=(10, 6))\n\nt_array_min = np.round(t.ppf(0.001, dof),3)\nt_array_max = np.round(t.ppf(0.999, dof),3)\nt_array = np.arange(t_array_min, t_array_max, 0.001)\n\n# annotate vertical array at t_value_scipy\nax.annotate(f\"t value = {t_value_scipy.statistic:.3f}\",\n                        xy=(t_value_scipy.statistic, 0.03),\n                        xytext=(t_value_scipy.statistic, 0.20),\n                        fontsize=14,\n                        arrowprops=dict(arrowstyle=\"-&gt;\", lw=2, color='black'),\n                        ha='center')\nax.annotate(f\"-t value = -{t_value_scipy.statistic:.3f}\",\n                        xy=(-t_value_scipy.statistic, 0.03),\n                        xytext=(-t_value_scipy.statistic, 0.20),\n                        fontsize=14,\n                        arrowprops=dict(arrowstyle=\"-&gt;\", lw=2, color='black'),\n                        ha='center')\n# fill between t-distribution and normal distribution\nax.fill_between(t_array, t.pdf(t_array, dof),\n                 where=(np.abs(t_array) &gt; t_value_scipy.statistic),\n                 color='tab:blue', alpha=0.5,\n                 label='rejection region')\n\n# write t_value_scipy.pvalue on the plot\nax.text(0, 0.05,\n        f\"p value = {t_value_scipy.pvalue:.3f}\", \n        ha='center', va='bottom',\n        bbox=dict(facecolor='tab:blue', alpha=0.5, boxstyle=\"round\"))\n\nax.plot(t_array, t.pdf(t_array, dof),\n       color='black', lw=2)\n\nax.set(xlabel='t',\n       ylabel='probability density',\n       title=\"t-distribution (N=100)\",\n       );",
    "crumbs": [
      "hypothesis testing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>one-sample t-test</span>"
    ]
  },
  {
    "objectID": "t_test/t_test_one_sample.html#question-2",
    "href": "t_test/t_test_one_sample.html#question-2",
    "title": "2  one-sample t-test",
    "section": "2.4 Question 2",
    "text": "2.4 Question 2\nCan we say that the sampled men are taller than the general population?",
    "crumbs": [
      "hypothesis testing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>one-sample t-test</span>"
    ]
  },
  {
    "objectID": "t_test/t_test_one_sample.html#hypotheses-1",
    "href": "t_test/t_test_one_sample.html#hypotheses-1",
    "title": "2  one-sample t-test",
    "section": "2.5 Hypotheses",
    "text": "2.5 Hypotheses\n\nNull hypothesis: The sample mean is equal to the population mean.\nAlternative hypothesis: The sample mean is higher the population mean.\nSignificance level: 0.05\n\nThe analysis is the same as before, but we will use a one-tailed test. The t statistic is the same, but the p value is smaller, since we account for a smaller portion of the total area of the pdf.\n\n\ncalculate t-value and p-value\nt_value_scipy = ttest_1samp(sample100, popmean=mu_boys, alternative='greater')\nprint(f\"t-value: {t_value_scipy.statistic:.3f}\")\nprint(f\"p-value: {t_value_scipy.pvalue:.3f}\")\n\n\nt-value: 2.675\np-value: 0.004\n\n\n\n\nvisualize t-distribution\n# degrees of freedom\ndof = N - 1\nfig, ax = plt.subplots(figsize=(10, 6))\n\nt_array_min = np.round(t.ppf(0.001, dof),3)\nt_array_max = np.round(t.ppf(0.999, dof),3)\nt_array = np.arange(t_array_min, t_array_max, 0.001)\n\n# annotate vertical array at t_value_scipy\nax.annotate(f\"t value = {t_value_scipy.statistic:.3f}\",\n                        xy=(t_value_scipy.statistic, 0.03),\n                        xytext=(t_value_scipy.statistic, 0.20),\n                        fontsize=14,\n                        arrowprops=dict(arrowstyle=\"-&gt;\", lw=2, color='black'),\n                        ha='center')\n# fill between t-distribution and normal distribution\nax.fill_between(t_array, t.pdf(t_array, dof),\n                 where=(t_array &gt; t_value_scipy.statistic),\n                 color='tab:blue', alpha=0.5,\n                 label='rejection region')\n\n# write t_value_scipy.pvalue on the plot\nax.text(0, 0.05,\n        f\"p value = {t_value_scipy.pvalue:.3f}\", \n        ha='center', va='bottom',\n        bbox=dict(facecolor='tab:blue', alpha=0.5, boxstyle=\"round\"))\n\nax.plot(t_array, t.pdf(t_array, dof),\n       color='black', lw=2)\n\nax.set(xlabel='t',\n       ylabel='probability density',\n       title=\"t-distribution (N=100)\",\n       );\n\n\n\n\n\n\n\n\n\nThe answer is yes: the sampled men are significantly taller than the general population, since the p value is smaller than the significance level.",
    "crumbs": [
      "hypothesis testing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>one-sample t-test</span>"
    ]
  },
  {
    "objectID": "t_test/t_test_independent_samples.html",
    "href": "t_test/t_test_independent_samples.html",
    "title": "3  independent samples t-test",
    "section": "",
    "text": "3.1 Question\nAre 12-year old girls significantly taller than 12-year old boys?",
    "crumbs": [
      "hypothesis testing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>independent samples t-test</span>"
    ]
  },
  {
    "objectID": "t_test/t_test_independent_samples.html#hypotheses",
    "href": "t_test/t_test_independent_samples.html#hypotheses",
    "title": "3  independent samples t-test",
    "section": "3.2 Hypotheses",
    "text": "3.2 Hypotheses\n\nNull hypothesis: Girls and boys have the same mean height.\nAlternative hypothesis: Girls are significantly taller.\nSignificance level: 0.05\n\n\n\nimport libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"ticks\", font_scale=1.5)\nfrom scipy.stats import norm, ttest_ind, t\n# %matplotlib widget\n\n\n\n\nload data\ndf_boys = pd.read_csv('../archive/data/height/boys_height_stats.csv', index_col=0)\ndf_girls = pd.read_csv('../archive/data/height/girls_height_stats.csv', index_col=0)\nage = 12.0\nmu_boys = df_boys.loc[age, 'mu']\nmu_girls = df_girls.loc[age, 'mu']\nsigma_boys = df_boys.loc[age, 'sigma']\nsigma_girls = df_girls.loc[age, 'sigma']\n\n\nIn this example, we sampled 10 boys and 14 girls. See below the samples data and their underlying distributions.\n\n\ngenerate data\nN_boys = 10\nN_girls = 14\n# set scipy seed for reproducibility\nnp.random.seed(314)\nsample_boys = norm.rvs(size=N_boys, loc=mu_boys, scale=sigma_boys)\nsample_girls = norm.rvs(size=N_girls, loc=mu_girls, scale=sigma_girls)\n\n\n\n\nShow the code\nheight_list = np.arange(120, 180, 0.1)\npdf_boys = norm.pdf(height_list, loc=mu_boys, scale=sigma_boys)\npdf_girls = norm.pdf(height_list, loc=mu_girls, scale=sigma_girls)\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(height_list, pdf_boys, lw=4, alpha=0.3, color='tab:blue', label='boys population')\nax.plot(height_list, pdf_girls, lw=4, alpha=0.3, color='tab:orange', label='girls population')\n\nax.eventplot(sample_boys, orientation=\"horizontal\", lineoffsets=0.03,\n             linewidth=1, linelengths= 0.005,\n             colors='tab:blue', label=f'boys sample, n={N_boys}')\nax.eventplot(sample_girls, orientation=\"horizontal\", lineoffsets=0.023,\n             linewidth=1, linelengths= 0.005,\n             colors='tab:orange', label=f'girls sample, n={N_girls}')\nax.legend(frameon=False)\nax.set(xlabel='height (cm)',\n       ylabel='probability density',\n    )\n\n\n\n\n\n\n\n\n\nTo answer the question, we will use an independent samples t-test.\n\\begin{align}\nt &= \\frac{\\bar{X}_1 - \\bar{X}_2}{\\Theta} \\\\\n\\Theta &= \\sqrt{\\frac{s_1^2}{n_1} + \\frac{s_2^2}{n_2}}\n\\end{align}\nThis is a generalization of the one-sample t-test. If we take one of the samples to be infinite, we get the one-sample t-test.\nWe can compute the t-statistic by ourselves, and compare the results with those of scipy.stats.ttest_ind. Because we are interested in the difference between the means, we will use the equal_var=False option to compute Welch’s t-test. Also, because we are testing the alternative hypothesis that girls are taller, we will use the one sided test.\n\n\nShow the code\nTheta = np.sqrt(sample_boys.std(ddof=1)**2/sample_boys.size + \\\n                sample_girls.std(ddof=1)**2/sample_girls.size)\nt_stat = (sample_boys.mean() - sample_girls.mean()) / Theta\ndof = N_boys + N_girls - 2\np_val = t.cdf(t_stat, dof)\n\n# the option alternative=\"less\" is used because we are testing whether the first sample (boys) is less than the second sample (girls)\nt_value_scipy = ttest_ind(sample_boys, sample_girls, equal_var=False, alternative=\"less\")\n\nprint(f\"t-statistic: {t_stat:.3f}, p-value: {p_val:.3f}\")\nprint(f\"t-statistic (scipy): {t_value_scipy.statistic:.3f}, p-value (scipy): {t_value_scipy.pvalue:.3f}\")\n\n\nt-statistic: -0.999, p-value: 0.164\nt-statistic (scipy): -0.999, p-value (scipy): 0.165\n\n\nWe got the exact same results :)\nNow let’s visualize what the p-value means.\n\n\nvisualize t-distribution\n# degrees of freedom\nfig, ax = plt.subplots(figsize=(10, 6))\n\nt_array_min = np.round(t.ppf(0.001, dof),3)\nt_array_max = np.round(t.ppf(0.999, dof),3)\nt_array = np.arange(t_array_min, t_array_max, 0.001)\n\n# annotate vertical array at t_value_scipy\nax.annotate(f\"t value = {t_value_scipy.statistic:.3f}\",\n                        xy=(t_value_scipy.statistic, 0.25),\n                        xytext=(t_value_scipy.statistic, 0.35),\n                        fontsize=14,\n                        arrowprops=dict(arrowstyle=\"-&gt;\", lw=2, color='black'),\n                        ha='center')\n# fill between t-distribution and normal distribution\nax.fill_between(t_array, t.pdf(t_array, dof),\n                 where=(t_array &lt; t_value_scipy.statistic),\n                 color='tab:blue', alpha=0.5,\n                 label='rejection region')\n\n# write t_value_scipy.pvalue on the plot\nax.text(0, 0.05,\n        f\"p value = {t_value_scipy.pvalue:.3f}\", \n        ha='center', va='bottom',\n        bbox=dict(facecolor='tab:blue', alpha=0.5, boxstyle=\"round\"))\n\nax.plot(t_array, t.pdf(t_array, dof),\n       color='black', lw=2)\n\nax.set(xlabel='t',\n       ylabel='probability density',\n       title=\"t-distribution (dof=22)\",\n       );\n\n\n\n\n\n\n\n\n\nBecause the p-value is higher than the significance level, we fail to reject the null hypothesis. This means that, based on the data, we cannot conclude that girls are significantly taller than boys.",
    "crumbs": [
      "hypothesis testing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>independent samples t-test</span>"
    ]
  },
  {
    "objectID": "t_test/t_test_independent_samples.html#increasing-sample-size",
    "href": "t_test/t_test_independent_samples.html#increasing-sample-size",
    "title": "3  independent samples t-test",
    "section": "3.3 increasing sample size",
    "text": "3.3 increasing sample size\nLet’s increase the sample size to see how it affects the p-value. We’ll sample 250 boys and 200 girls now.\n\n\ngenerate data\nN_boys = 250\nN_girls = 200\n# set scipy seed for reproducibility\nnp.random.seed(314)\nsample_boys = norm.rvs(size=N_boys, loc=mu_boys, scale=sigma_boys)\nsample_girls = norm.rvs(size=N_girls, loc=mu_girls, scale=sigma_girls)\n\n\n\n\nShow the code\nheight_list = np.arange(120, 180, 0.1)\npdf_boys = norm.pdf(height_list, loc=mu_boys, scale=sigma_boys)\npdf_girls = norm.pdf(height_list, loc=mu_girls, scale=sigma_girls)\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(height_list, pdf_boys, lw=4, alpha=0.3, color='tab:blue', label='boys population')\nax.plot(height_list, pdf_girls, lw=4, alpha=0.3, color='tab:orange', label='girls population')\n\nax.eventplot(sample_boys, orientation=\"horizontal\", lineoffsets=0.03,\n             linewidth=1, linelengths= 0.005,\n             colors='tab:blue', label=f'boys sample, n={N_boys}')\nax.eventplot(sample_girls, orientation=\"horizontal\", lineoffsets=0.023,\n             linewidth=1, linelengths= 0.005,\n             colors='tab:orange', label=f'girls sample, n={N_girls}')\nax.legend(frameon=False)\nax.set(xlabel='height (cm)',\n       ylabel='probability density',\n    )\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nTheta = np.sqrt(sample_boys.std(ddof=1)**2/sample_boys.size + \\\n                sample_girls.std(ddof=1)**2/sample_girls.size)\nt_stat = (sample_boys.mean() - sample_girls.mean()) / Theta\ndof = N_boys + N_girls - 2\np_val = t.cdf(t_stat, dof)\n\n# the option alternative=\"less\" is used because we are testing whether the first sample (boys) is less than the second sample (girls)\nt_value_scipy = ttest_ind(sample_boys, sample_girls, equal_var=False, alternative=\"less\")\n\nprint(f\"t-statistic: {t_stat:.3f}, p-value: {p_val:.3f}\")\nprint(f\"t-statistic (scipy): {t_value_scipy.statistic:.3f}, p-value (scipy): {t_value_scipy.pvalue:.3f}\")\n\n\nt-statistic: -2.639, p-value: 0.004\nt-statistic (scipy): -2.639, p-value (scipy): 0.004\n\n\nWe found now a p-value lower than the significance level, so we reject the null hypothesis. This means that, based on the data, we can conclude that girls are significantly taller than boys.",
    "crumbs": [
      "hypothesis testing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>independent samples t-test</span>"
    ]
  }
]